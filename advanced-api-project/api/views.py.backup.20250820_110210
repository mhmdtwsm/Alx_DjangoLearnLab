"""
Enhanced API views with filtering, searching, and ordering capabilities.
"""

from rest_framework import generics, status, permissions
from rest_framework.response import Response
from rest_framework.filters import SearchFilter, OrderingFilter
from django_filters.rest_framework import DjangoFilterBackend
from django.shortcuts import get_object_or_404
from .models import Book, Author
from .serializers import BookSerializer, AuthorSerializer
from .filters import BookFilter


class BookListView(generics.ListCreateAPIView):
    """
    List all books or create a new book.
    
    Supports:
    - Filtering by title, author, publication_year
    - Searching in title and author fields
    - Ordering by any field (title, publication_year, etc.)
    
    Query Parameters:
    - title: Filter by exact title
    - author: Filter by author ID
    - publication_year: Filter by publication year
    - search: Search in title and author name
    - ordering: Order by field (prefix with '-' for descending)
    
    Examples:
    - /api/books/?title=Django
    - /api/books/?author=1
    - /api/books/?publication_year=2023
    - /api/books/?search=python
    - /api/books/?ordering=title
    - /api/books/?ordering=-publication_year
    - /api/books/?title=Django&ordering=publication_year
    """
    queryset = Book.objects.all()
    serializer_class = BookSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]
    
    # Configure filtering, searching, and ordering
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_class = BookFilter
    search_fields = ['title', 'author__name']
    ordering_fields = ['title', 'publication_year', 'author__name']
    ordering = ['title']  # Default ordering

    def create(self, request, *args, **kwargs):
        """Create a new book with enhanced validation."""
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(
                {
                    'message': 'Book created successfully',
                    'data': serializer.data
                },
                status=status.HTTP_201_CREATED
            )
        return Response(
            {
                'message': 'Validation failed',
                'errors': serializer.errors
            },
            status=status.HTTP_400_BAD_REQUEST
        )

    def list(self, request, *args, **kwargs):
        """List books with filtering information."""
        queryset = self.filter_queryset(self.get_queryset())
        
        # Get pagination info
        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            result = self.get_paginated_response(serializer.data)
            result.data['message'] = 'Books retrieved successfully'
            result.data['filters_applied'] = {
                'search': request.query_params.get('search', None),
                'ordering': request.query_params.get('ordering', 'title'),
                'filters': {k: v for k, v in request.query_params.items() 
                          if k not in ['search', 'ordering', 'page']}
            }
            return result

        serializer = self.get_serializer(queryset, many=True)
        return Response({
            'message': 'Books retrieved successfully',
            'count': queryset.count(),
            'data': serializer.data,
            'filters_applied': {
                'search': request.query_params.get('search', None),
                'ordering': request.query_params.get('ordering', 'title'),
                'filters': {k: v for k, v in request.query_params.items() 
                          if k not in ['search', 'ordering']}
            }
        })


class BookDetailView(generics.RetrieveUpdateDestroyAPIView):
    """
    Retrieve, update, or delete a specific book.
    """
    queryset = Book.objects.all()
    serializer_class = BookSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def retrieve(self, request, *args, **kwargs):
        """Retrieve a book with enhanced response."""
        instance = self.get_object()
        serializer = self.get_serializer(instance)
        return Response({
            'message': 'Book retrieved successfully',
            'data': serializer.data
        })

    def update(self, request, *args, **kwargs):
        """Update a book with enhanced validation."""
        partial = kwargs.pop('partial', False)
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=partial)
        
        if serializer.is_valid():
            self.perform_update(serializer)
            return Response({
                'message': 'Book updated successfully',
                'data': serializer.data
            })
        return Response({
            'message': 'Validation failed',
            'errors': serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

    def destroy(self, request, *args, **kwargs):
        """Delete a book with confirmation."""
        instance = self.get_object()
        self.perform_destroy(instance)
        return Response({
            'message': 'Book deleted successfully'
        }, status=status.HTTP_204_NO_CONTENT)


class AuthorListView(generics.ListCreateAPIView):
    """
    List all authors or create a new author.
    
    Supports:
    - Searching by name
    - Ordering by name
    """
    queryset = Author.objects.all()
    serializer_class = AuthorSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]
    
    # Configure searching and ordering for authors
    filter_backends = [SearchFilter, OrderingFilter]
    search_fields = ['name']
    ordering_fields = ['name']
    ordering = ['name']

    def create(self, request, *args, **kwargs):
        """Create a new author."""
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({
                'message': 'Author created successfully',
                'data': serializer.data
            }, status=status.HTTP_201_CREATED)
        return Response({
            'message': 'Validation failed',
            'errors': serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class AuthorDetailView(generics.RetrieveUpdateDestroyAPIView):
    """
    Retrieve, update, or delete a specific author.
    """
    queryset = Author.objects.all()
    serializer_class = AuthorSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def retrieve(self, request, *args, **kwargs):
        """Retrieve an author with their books."""
        instance = self.get_object()
        serializer = self.get_serializer(instance)
        return Response({
            'message': 'Author retrieved successfully',
            'data': serializer.data
        })
